on:
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-20.04
    timeout-minutes: 20

    strategy:
      matrix:
        arch: [ppc64le]
        toolchain: [clang]
        config: [debug]
        rustc: [2021-02-20]
        output: [src] # [src, build]
        install: [rustup] # [rustup, standalone]
        sysroot: [common] # [common, custom]

    steps:
      # Setup: checkout
      - uses: actions/checkout@v2

      # Setup: variables
      - if: matrix.arch == 'ppc64le'
        run: |
          echo 'MAKE_ARCH=ARCH=powerpc' >> $GITHUB_ENV
          echo 'MAKE_CROSS_COMPILE=CROSS_COMPILE=powerpc64le-linux-gnu-' >> $GITHUB_ENV
          echo 'IMAGE_PATH=vmlinux' >> $GITHUB_ENV
          echo 'QEMU_ARCH=ppc64' >> $GITHUB_ENV
          echo 'QEMU_MACHINE=pseries' >> $GITHUB_ENV
          echo 'QEMU_CPU=POWER9' >> $GITHUB_ENV

      - if: matrix.toolchain == 'clang'
        run: echo 'MAKE_TOOLCHAIN=CC=clang-11' >> $GITHUB_ENV

      # Setup: LLVM
      - run: curl https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
      - run: sudo add-apt-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main'
      - run: sudo apt-get update -y
      - run: sudo apt-get install -y llvm-11 clang-11 lld-11
      - run: echo $(llvm-config-11 --bindir) >> $GITHUB_PATH

      # Setup: GCC
      - if: matrix.arch == 'ppc64le'
        run: sudo apt-get install -y gcc-powerpc64le-linux-gnu

      # Setup: libelf
      - run: sudo apt-get install -y libelf-dev

      # Setup: QEMU
      - if: matrix.arch == 'ppc64le'
        run: sudo apt-get install -y qemu-system-ppc64

      # Setup: rustc
      - if: matrix.install == 'rustup'
        run: |
          rustup default nightly-${{ matrix.rustc }}
          rustup component add rustfmt

      # Setup: rustc source
      - if: matrix.install == 'rustup' && matrix.sysroot == 'common'
        run: rustup component add rust-src

      # Setup: clippy
      - run: rustup component add clippy

      # Setup: bindgen
      - run: cargo install --version 0.56.0 bindgen

      # Setup: busybox
      - run: git clone --depth 1 -b 1_30_1 https://github.com/mirror/busybox
      - run: mv .github/workflows/busybox.config busybox/.config
      - run: cd busybox && make ${{ env.MAKE_CROSS_COMPILE }} -j3

      # Build
      - run: mv .github/workflows/kernel-${{ matrix.arch }}-${{ matrix.config }}.config .config

      - run: make ${{ env.MAKE_ARCH }} ${{ env.MAKE_CROSS_COMPILE }} ${{ env.MAKE_TOOLCHAIN }} ${{ env.MAKE_OUTPUT }} ${{ env.MAKE_SYSROOT }} -j3

      # Run
      - run: ${{ env.BUILD_DIR }}usr/gen_init_cpio .github/workflows/qemu-initramfs.desc > qemu-initramfs.img

      - run: |
          qemu-system-${{ env.QEMU_ARCH }} \
            -kernel ${{ env.BUILD_DIR }}${{ env.IMAGE_PATH }} \
            -initrd qemu-initramfs.img \
            -M ${{ env.QEMU_MACHINE }} \
            -cpu ${{ env.QEMU_CPU }} \
            -smp 2 \
            -nographic \
            -vga none \
            -no-reboot \
            -append '${{ env.QEMU_APPEND }} \
              rust_example.my_i32=123321 \
              rust_example.my_str=ðŸ¦€mod \
              rust_example_2.my_i32=234432 \
              rust_example_2.my_array=1,2,3' \
            | sed s:$'\r'$:: \
            | tee qemu-stdout.log

      # Check
      - run: |
          grep      '] Rust Example (init)$' qemu-stdout.log
          grep '] \[2] Rust Example (init)$' qemu-stdout.log
          grep '] \[3] Rust Example (init)$' qemu-stdout.log
          grep '] \[4] Rust Example (init)$' qemu-stdout.log

          grep      ']   my_i32:     123321$' qemu-stdout.log
          grep '] \[2]   my_i32:     234432$' qemu-stdout.log
          grep '] \[3]   my_i32:     345543$' qemu-stdout.log
          grep '] \[4]   my_i32:     456654$' qemu-stdout.log

          grep      ']   my_usize:   42$' qemu-stdout.log
          grep '] \[2]   my_usize:   42$' qemu-stdout.log
          grep '] \[3]   my_usize:   42$' qemu-stdout.log
          grep '] \[4]   my_usize:   84$' qemu-stdout.log

          grep      ']   my_str:     ðŸ¦€mod$'           qemu-stdout.log
          grep '] \[2]   my_str:     default str val$' qemu-stdout.log
          grep '] \[3]   my_str:     ðŸ¦€mod$'           qemu-stdout.log
          grep '] \[4]   my_str:     default str val$' qemu-stdout.log

          grep      ']   my_array:   \[0, 1]$'    qemu-stdout.log
          grep '] \[2]   my_array:   \[1, 2, 3]$' qemu-stdout.log
          grep '] \[3]   my_array:   \[0, 1]$'    qemu-stdout.log
          grep '] \[4]   my_array:   \[1, 2, 3]$' qemu-stdout.log

          grep '] \[3] Rust Example (exit)$' qemu-stdout.log
          grep '] \[4] Rust Example (exit)$' qemu-stdout.log

      # Report
      - run: |
          ls -l \
            ${{ env.BUILD_DIR }}drivers/char/rust_example.o \
            ${{ env.BUILD_DIR }}drivers/char/rust_example_3.ko \
            ${{ env.BUILD_DIR }}rust/*.o \
            ${{ env.BUILD_DIR }}vmlinux \
            ${{ env.BUILD_DIR }}${{ env.IMAGE_PATH }}

          size \
            ${{ env.BUILD_DIR }}drivers/char/rust_example.o \
            ${{ env.BUILD_DIR }}drivers/char/rust_example_3.ko \
            ${{ env.BUILD_DIR }}rust/*.o \
            ${{ env.BUILD_DIR }}vmlinux

      # Clippy
      - run: make ${{ env.MAKE_ARCH }} ${{ env.MAKE_CROSS_COMPILE }} ${{ env.MAKE_TOOLCHAIN }} ${{ env.MAKE_OUTPUT }} ${{ env.MAKE_SYSROOT }} -j3 CLIPPY=1

      # Docs
      - run: make ${{ env.MAKE_ARCH }} ${{ env.MAKE_CROSS_COMPILE }} ${{ env.MAKE_TOOLCHAIN }} ${{ env.MAKE_OUTPUT }} ${{ env.MAKE_SYSROOT }} -j3 rustdoc

      # Formatting
      - run: make rustfmtcheck
